#+TITLE: URL Poller Project Progress Report
#+AUTHOR: Prem Modha
#+DATE: September 29, 2025
#+EMAIL: prem.modha@motadata.com

* Project Overview

** Project Details
- *Project Name*: URL/IP Poller (Vert.x Application)

** Description
A distributed URL polling system built with Eclipse Vert.x that monitors multiple IP addresses by sending ping requests at configurable intervals. The application uses a verticle-based architecture for concurrent processing and maintains statistics for each monitored endpoint.

* Technical Architecture

** Core Components

*** MainVerticle.java
- Entry point of the application
- Deploys ConfigReaderVerticle and TaskSchedulerVerticle
- Handles command-line argument for configuration file path

*** ConfigReaderVerticle.java
- Reads URL configuration from file (urls.txt)
- Parses IP addresses with polling intervals
- Publishes CONFIG_LOADED event when configuration is ready

*** TaskSchedulerVerticle.java
- Listens for CONFIG_LOADED events
- Groups IP addresses by polling intervals
- Creates periodic tasks for each polling interval group
- Deploys PingVerticle instances for scheduled execution

*** PingVerticle.java
- Handles a set of IP addresses with same polling interval
- Deploys WorkerVerticle instances for parallel ping execution
- Uses worker thread pool for non-blocking operations

*** WorkerVerticle.java
- Executes ping command for individual IP addresses
- Captures stdout and stderr from ping process
- Writes results to individual files in stats/ directory
- Implements proper error handling and resource cleanup

*** Ip.java
- Data model for IP address and polling interval
- Implements Comparable and Serializable interfaces
- Includes Jackson annotations for JSON serialization

*** Event System
- Event.java: Defines application events (CONFIG_LOADED)
- EventHandler.java: Manages event publishing and consumption
- Provides decoupled communication between verticles

* diasg
#+begin_src mermaid
flowchart TD
    A[MainVerticle<br/>Entry Point] -->|deploys| B[ConfigReaderVerticle]
    A -->|deploys| C[TaskSchedulerVerticle]

    B -->|reads urls.txt<br/>parses IPs| D[CONFIG_LOADED Event]
    B --> EventSystem

    C -->|listens for CONFIG_LOADED| D
    C -->|groups IPs by interval<br/>creates periodic tasks| E[PingVerticle Instances]
    C --> EventSystem

    E -->|deploys for parallel execution| F[WorkerVerticle Instances]
    E -->|handles set of IPs| G[Ping Execution]

    F -->|executes ping for IP| H[Capture stdout/stderr<br/>Error Handling]
    F -->|writes results| I[stats/ Directory Files]

    EventSystem[Event System<br/>Event.java & EventHandler.java]
    EventSystem <--> B
    EventSystem <--> C

    IpModel[Ip.java<br/>Data Model]
    IpModel --> B
    IpModel --> C
    IpModel --> F

    style A fill:#f9f,stroke:#333
    style EventSystem fill:#bbf,stroke:#333


#+end_src
